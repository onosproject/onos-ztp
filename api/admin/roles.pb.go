// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/admin/roles.proto

package admin

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceRoleChange_ChangeType int32

const (
	DeviceRoleChange_UPDATED DeviceRoleChange_ChangeType = 0
	DeviceRoleChange_ADDED   DeviceRoleChange_ChangeType = 1
	DeviceRoleChange_DELETED DeviceRoleChange_ChangeType = 2
)

var DeviceRoleChange_ChangeType_name = map[int32]string{
	0: "UPDATED",
	1: "ADDED",
	2: "DELETED",
}

var DeviceRoleChange_ChangeType_value = map[string]int32{
	"UPDATED": 0,
	"ADDED":   1,
	"DELETED": 2,
}

func (x DeviceRoleChange_ChangeType) String() string {
	return proto.EnumName(DeviceRoleChange_ChangeType_name, int32(x))
}

func (DeviceRoleChange_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{4, 0}
}

type DeviceRoleChangeRequest_ChangeType int32

const (
	DeviceRoleChangeRequest_UPDATE DeviceRoleChangeRequest_ChangeType = 0
	DeviceRoleChangeRequest_ADD    DeviceRoleChangeRequest_ChangeType = 1
	DeviceRoleChangeRequest_DELETE DeviceRoleChangeRequest_ChangeType = 2
)

var DeviceRoleChangeRequest_ChangeType_name = map[int32]string{
	0: "UPDATE",
	1: "ADD",
	2: "DELETE",
}

var DeviceRoleChangeRequest_ChangeType_value = map[string]int32{
	"UPDATE": 0,
	"ADD":    1,
	"DELETE": 2,
}

func (x DeviceRoleChangeRequest_ChangeType) String() string {
	return proto.EnumName(DeviceRoleChangeRequest_ChangeType_name, int32(x))
}

func (DeviceRoleChangeRequest_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{5, 0}
}

// DeviceRoleConfig carries the template configuration associated with a device role
type DeviceRoleConfig struct {
	Role                 string          `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Config               *DeviceConfig   `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Pipeline             *DevicePipeline `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DeviceRoleConfig) Reset()         { *m = DeviceRoleConfig{} }
func (m *DeviceRoleConfig) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleConfig) ProtoMessage()    {}
func (*DeviceRoleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{0}
}

func (m *DeviceRoleConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRoleConfig.Unmarshal(m, b)
}
func (m *DeviceRoleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRoleConfig.Marshal(b, m, deterministic)
}
func (m *DeviceRoleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleConfig.Merge(m, src)
}
func (m *DeviceRoleConfig) XXX_Size() int {
	return xxx_messageInfo_DeviceRoleConfig.Size(m)
}
func (m *DeviceRoleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleConfig proto.InternalMessageInfo

func (m *DeviceRoleConfig) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *DeviceRoleConfig) GetConfig() *DeviceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *DeviceRoleConfig) GetPipeline() *DevicePipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

// DeviceConfig is a set of initial configuration properties to be applied to a device.
type DeviceConfig struct {
	SoftwareVersion      string            `protobuf:"bytes,1,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	Properties           []*DeviceProperty `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeviceConfig) Reset()         { *m = DeviceConfig{} }
func (m *DeviceConfig) String() string { return proto.CompactTextString(m) }
func (*DeviceConfig) ProtoMessage()    {}
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{1}
}

func (m *DeviceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceConfig.Unmarshal(m, b)
}
func (m *DeviceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceConfig.Marshal(b, m, deterministic)
}
func (m *DeviceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConfig.Merge(m, src)
}
func (m *DeviceConfig) XXX_Size() int {
	return xxx_messageInfo_DeviceConfig.Size(m)
}
func (m *DeviceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConfig proto.InternalMessageInfo

func (m *DeviceConfig) GetSoftwareVersion() string {
	if m != nil {
		return m.SoftwareVersion
	}
	return ""
}

func (m *DeviceConfig) GetProperties() []*DeviceProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

// DeviceProperty is a path/type/value tuple
type DeviceProperty struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceProperty) Reset()         { *m = DeviceProperty{} }
func (m *DeviceProperty) String() string { return proto.CompactTextString(m) }
func (*DeviceProperty) ProtoMessage()    {}
func (*DeviceProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{2}
}

func (m *DeviceProperty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceProperty.Unmarshal(m, b)
}
func (m *DeviceProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceProperty.Marshal(b, m, deterministic)
}
func (m *DeviceProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceProperty.Merge(m, src)
}
func (m *DeviceProperty) XXX_Size() int {
	return xxx_messageInfo_DeviceProperty.Size(m)
}
func (m *DeviceProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceProperty.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceProperty proto.InternalMessageInfo

func (m *DeviceProperty) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DeviceProperty) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeviceProperty) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// DevicePipeline carries information about the P4 pipeline configuration
type DevicePipeline struct {
	Pipeconf             string   `protobuf:"bytes,1,opt,name=pipeconf,proto3" json:"pipeconf,omitempty"`
	Driver               string   `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevicePipeline) Reset()         { *m = DevicePipeline{} }
func (m *DevicePipeline) String() string { return proto.CompactTextString(m) }
func (*DevicePipeline) ProtoMessage()    {}
func (*DevicePipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{3}
}

func (m *DevicePipeline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicePipeline.Unmarshal(m, b)
}
func (m *DevicePipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicePipeline.Marshal(b, m, deterministic)
}
func (m *DevicePipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePipeline.Merge(m, src)
}
func (m *DevicePipeline) XXX_Size() int {
	return xxx_messageInfo_DevicePipeline.Size(m)
}
func (m *DevicePipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePipeline.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePipeline proto.InternalMessageInfo

func (m *DevicePipeline) GetPipeconf() string {
	if m != nil {
		return m.Pipeconf
	}
	return ""
}

func (m *DevicePipeline) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

// DeviceRoleChange is an event describing a change to a device role configuration.
type DeviceRoleChange struct {
	Change               DeviceRoleChange_ChangeType `protobuf:"varint,1,opt,name=change,proto3,enum=admin.DeviceRoleChange_ChangeType" json:"change,omitempty"`
	Config               *DeviceRoleConfig           `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DeviceRoleChange) Reset()         { *m = DeviceRoleChange{} }
func (m *DeviceRoleChange) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleChange) ProtoMessage()    {}
func (*DeviceRoleChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{4}
}

func (m *DeviceRoleChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRoleChange.Unmarshal(m, b)
}
func (m *DeviceRoleChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRoleChange.Marshal(b, m, deterministic)
}
func (m *DeviceRoleChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleChange.Merge(m, src)
}
func (m *DeviceRoleChange) XXX_Size() int {
	return xxx_messageInfo_DeviceRoleChange.Size(m)
}
func (m *DeviceRoleChange) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleChange.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleChange proto.InternalMessageInfo

func (m *DeviceRoleChange) GetChange() DeviceRoleChange_ChangeType {
	if m != nil {
		return m.Change
	}
	return DeviceRoleChange_UPDATED
}

func (m *DeviceRoleChange) GetConfig() *DeviceRoleConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// DeviceRoleChangeRequest is a request for a change to a device role configuration
type DeviceRoleChangeRequest struct {
	Change               DeviceRoleChangeRequest_ChangeType `protobuf:"varint,1,opt,name=change,proto3,enum=admin.DeviceRoleChangeRequest_ChangeType" json:"change,omitempty"`
	Config               *DeviceRoleConfig                  `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *DeviceRoleChangeRequest) Reset()         { *m = DeviceRoleChangeRequest{} }
func (m *DeviceRoleChangeRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleChangeRequest) ProtoMessage()    {}
func (*DeviceRoleChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{5}
}

func (m *DeviceRoleChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRoleChangeRequest.Unmarshal(m, b)
}
func (m *DeviceRoleChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRoleChangeRequest.Marshal(b, m, deterministic)
}
func (m *DeviceRoleChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleChangeRequest.Merge(m, src)
}
func (m *DeviceRoleChangeRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceRoleChangeRequest.Size(m)
}
func (m *DeviceRoleChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleChangeRequest proto.InternalMessageInfo

func (m *DeviceRoleChangeRequest) GetChange() DeviceRoleChangeRequest_ChangeType {
	if m != nil {
		return m.Change
	}
	return DeviceRoleChangeRequest_UPDATE
}

func (m *DeviceRoleChangeRequest) GetConfig() *DeviceRoleConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// DeviceRoleChangeResponse is a response for a change to a device role configuration
type DeviceRoleChangeResponse struct {
	Change               *DeviceRoleChange `protobuf:"bytes,2,opt,name=change,proto3" json:"change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeviceRoleChangeResponse) Reset()         { *m = DeviceRoleChangeResponse{} }
func (m *DeviceRoleChangeResponse) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleChangeResponse) ProtoMessage()    {}
func (*DeviceRoleChangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{6}
}

func (m *DeviceRoleChangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRoleChangeResponse.Unmarshal(m, b)
}
func (m *DeviceRoleChangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRoleChangeResponse.Marshal(b, m, deterministic)
}
func (m *DeviceRoleChangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleChangeResponse.Merge(m, src)
}
func (m *DeviceRoleChangeResponse) XXX_Size() int {
	return xxx_messageInfo_DeviceRoleChangeResponse.Size(m)
}
func (m *DeviceRoleChangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleChangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleChangeResponse proto.InternalMessageInfo

func (m *DeviceRoleChangeResponse) GetChange() *DeviceRoleChange {
	if m != nil {
		return m.Change
	}
	return nil
}

// DeviceRoleRequest is a request for device role configuration.
type DeviceRoleRequest struct {
	Role                 string   `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceRoleRequest) Reset()         { *m = DeviceRoleRequest{} }
func (m *DeviceRoleRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleRequest) ProtoMessage()    {}
func (*DeviceRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b153134f189bc2e, []int{7}
}

func (m *DeviceRoleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRoleRequest.Unmarshal(m, b)
}
func (m *DeviceRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRoleRequest.Marshal(b, m, deterministic)
}
func (m *DeviceRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleRequest.Merge(m, src)
}
func (m *DeviceRoleRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceRoleRequest.Size(m)
}
func (m *DeviceRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleRequest proto.InternalMessageInfo

func (m *DeviceRoleRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func init() {
	proto.RegisterEnum("admin.DeviceRoleChange_ChangeType", DeviceRoleChange_ChangeType_name, DeviceRoleChange_ChangeType_value)
	proto.RegisterEnum("admin.DeviceRoleChangeRequest_ChangeType", DeviceRoleChangeRequest_ChangeType_name, DeviceRoleChangeRequest_ChangeType_value)
	proto.RegisterType((*DeviceRoleConfig)(nil), "admin.DeviceRoleConfig")
	proto.RegisterType((*DeviceConfig)(nil), "admin.DeviceConfig")
	proto.RegisterType((*DeviceProperty)(nil), "admin.DeviceProperty")
	proto.RegisterType((*DevicePipeline)(nil), "admin.DevicePipeline")
	proto.RegisterType((*DeviceRoleChange)(nil), "admin.DeviceRoleChange")
	proto.RegisterType((*DeviceRoleChangeRequest)(nil), "admin.DeviceRoleChangeRequest")
	proto.RegisterType((*DeviceRoleChangeResponse)(nil), "admin.DeviceRoleChangeResponse")
	proto.RegisterType((*DeviceRoleRequest)(nil), "admin.DeviceRoleRequest")
}

func init() { proto.RegisterFile("api/admin/roles.proto", fileDescriptor_5b153134f189bc2e) }

var fileDescriptor_5b153134f189bc2e = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xe3, 0x2f, 0xee, 0xe7, 0x5b, 0x54, 0xcc, 0x85, 0x52, 0xab, 0x0b, 0x88, 0x66, 0x43,
	0x10, 0x22, 0x69, 0x83, 0xd8, 0x74, 0x45, 0x84, 0x03, 0x0b, 0x10, 0xaa, 0x26, 0x85, 0xbd, 0x93,
	0xde, 0xb6, 0x23, 0x05, 0xcf, 0x30, 0x76, 0x82, 0xf2, 0x02, 0x3c, 0x10, 0x6b, 0x5e, 0x84, 0xb7,
	0x41, 0xf3, 0x93, 0x1f, 0x27, 0x04, 0x09, 0x89, 0x55, 0xee, 0xdc, 0x73, 0xee, 0x99, 0x73, 0xee,
	0x28, 0x86, 0xa3, 0x5c, 0x89, 0x6e, 0x7e, 0xf5, 0x59, 0x14, 0x5d, 0x2d, 0x27, 0x54, 0x76, 0x94,
	0x96, 0x95, 0xc4, 0xa6, 0x6d, 0xb1, 0x6f, 0x01, 0x24, 0x19, 0xcd, 0xc4, 0x98, 0xb8, 0x9c, 0xd0,
	0x6b, 0x59, 0x5c, 0x8b, 0x1b, 0x44, 0xf8, 0xcf, 0x50, 0xd3, 0xa0, 0x15, 0xb4, 0x63, 0x6e, 0x6b,
	0x7c, 0x06, 0xd1, 0xd8, 0xa2, 0x69, 0xa3, 0x15, 0xb4, 0x0f, 0x7a, 0xf7, 0x3b, 0x56, 0xa0, 0xe3,
	0x86, 0xdd, 0x20, 0xf7, 0x14, 0x3c, 0x83, 0xff, 0x95, 0x50, 0x34, 0x11, 0x05, 0xa5, 0xa1, 0xa5,
	0x1f, 0xd5, 0xe8, 0x17, 0x1e, 0xe4, 0x4b, 0x1a, 0x93, 0x70, 0x67, 0x5d, 0x0a, 0xdb, 0x70, 0xb7,
	0x94, 0xd7, 0xd5, 0xd7, 0x5c, 0xd3, 0x27, 0xd2, 0xa5, 0x90, 0x85, 0xb7, 0xb3, 0xd9, 0xc6, 0x97,
	0x00, 0x4a, 0x4b, 0x45, 0xba, 0x12, 0x54, 0xa6, 0x8d, 0x56, 0xb8, 0x7d, 0x9d, 0x83, 0xe7, 0x7c,
	0x8d, 0xc8, 0x3e, 0xc0, 0x61, 0x1d, 0x35, 0xb1, 0x55, 0x5e, 0xdd, 0x2e, 0x62, 0x9b, 0xda, 0xf4,
	0xaa, 0xb9, 0x22, 0x1b, 0x3a, 0xe6, 0xb6, 0xc6, 0x07, 0xd0, 0x9c, 0xe5, 0x93, 0xa9, 0x8b, 0x16,
	0x73, 0x77, 0x60, 0xd9, 0x52, 0xcf, 0x47, 0xc2, 0x13, 0xb7, 0x05, 0xb3, 0x13, 0xaf, 0xb9, 0x3c,
	0xe3, 0x43, 0x88, 0xae, 0xb4, 0x98, 0x91, 0xf6, 0xca, 0xfe, 0xc4, 0xbe, 0xd7, 0xdf, 0xe3, 0x36,
	0x2f, 0x6e, 0x08, 0xcf, 0x21, 0x1a, 0xdb, 0xca, 0xca, 0x1c, 0xf6, 0x58, 0x2d, 0xdd, 0x8a, 0xd8,
	0x71, 0x3f, 0x97, 0x73, 0x45, 0xdc, 0x4f, 0x60, 0x77, 0xe3, 0xdd, 0x8e, 0xb7, 0x67, 0x6b, 0x6f,
	0xc7, 0xce, 0x00, 0x56, 0x32, 0x78, 0x00, 0xfb, 0x1f, 0x2f, 0xb2, 0xfe, 0xe5, 0x20, 0x4b, 0xf6,
	0x30, 0x86, 0x66, 0x3f, 0xcb, 0x06, 0x59, 0x12, 0x98, 0x7e, 0x36, 0x78, 0x3f, 0x30, 0xfd, 0x06,
	0xfb, 0x11, 0xc0, 0xf1, 0xa6, 0x17, 0x4e, 0x5f, 0xa6, 0x54, 0x56, 0xd8, 0xdf, 0xf0, 0xfe, 0x74,
	0x87, 0x77, 0xcf, 0xff, 0x27, 0x11, 0x9e, 0xd7, 0x22, 0x00, 0x44, 0x2e, 0x42, 0xb2, 0x87, 0xfb,
	0x10, 0xf6, 0x33, 0xe3, 0x1f, 0x20, 0x72, 0xfe, 0x93, 0x06, 0x7b, 0x07, 0xe9, 0xb6, 0x9b, 0x52,
	0xc9, 0xa2, 0x74, 0x77, 0x3b, 0xfb, 0x3b, 0xef, 0x76, 0x03, 0x9e, 0xc6, 0x9e, 0xc0, 0xbd, 0x15,
	0xb6, 0x58, 0xc2, 0x6f, 0xfe, 0x50, 0xbd, 0x9f, 0xc1, 0x3a, 0x73, 0x48, 0xda, 0x94, 0xf8, 0x06,
	0xc2, 0x21, 0x55, 0xf8, 0xe8, 0xcf, 0x5b, 0x3a, 0x79, 0xbc, 0x13, 0xf7, 0xbe, 0xcf, 0x21, 0x7c,
	0x4b, 0x15, 0xa6, 0x5b, 0xbc, 0x85, 0xc2, 0xae, 0x25, 0x9e, 0x06, 0xf8, 0x0a, 0xe2, 0xe1, 0x74,
	0x54, 0x8e, 0xb5, 0x18, 0xd1, 0xdf, 0x29, 0x58, 0x0f, 0xa7, 0xc1, 0x28, 0xb2, 0xdf, 0x98, 0x17,
	0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x82, 0xb4, 0xbf, 0x1e, 0x7c, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceRoleServiceClient is the client API for DeviceRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceRoleServiceClient interface {
	// Set provides means to add, update or delete device role configuration.
	Set(ctx context.Context, in *DeviceRoleChangeRequest, opts ...grpc.CallOption) (*DeviceRoleChangeResponse, error)
	// Get provides means to query device role configuration.
	Get(ctx context.Context, in *DeviceRoleRequest, opts ...grpc.CallOption) (DeviceRoleService_GetClient, error)
	// Subscribe provides means to monitor changes in the device role configuration.
	Subscribe(ctx context.Context, in *DeviceRoleRequest, opts ...grpc.CallOption) (DeviceRoleService_SubscribeClient, error)
}

type deviceRoleServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceRoleServiceClient(cc *grpc.ClientConn) DeviceRoleServiceClient {
	return &deviceRoleServiceClient{cc}
}

func (c *deviceRoleServiceClient) Set(ctx context.Context, in *DeviceRoleChangeRequest, opts ...grpc.CallOption) (*DeviceRoleChangeResponse, error) {
	out := new(DeviceRoleChangeResponse)
	err := c.cc.Invoke(ctx, "/admin.DeviceRoleService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRoleServiceClient) Get(ctx context.Context, in *DeviceRoleRequest, opts ...grpc.CallOption) (DeviceRoleService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceRoleService_serviceDesc.Streams[0], "/admin.DeviceRoleService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceRoleServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceRoleService_GetClient interface {
	Recv() (*DeviceRoleConfig, error)
	grpc.ClientStream
}

type deviceRoleServiceGetClient struct {
	grpc.ClientStream
}

func (x *deviceRoleServiceGetClient) Recv() (*DeviceRoleConfig, error) {
	m := new(DeviceRoleConfig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceRoleServiceClient) Subscribe(ctx context.Context, in *DeviceRoleRequest, opts ...grpc.CallOption) (DeviceRoleService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceRoleService_serviceDesc.Streams[1], "/admin.DeviceRoleService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceRoleServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceRoleService_SubscribeClient interface {
	Recv() (*DeviceRoleChange, error)
	grpc.ClientStream
}

type deviceRoleServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceRoleServiceSubscribeClient) Recv() (*DeviceRoleChange, error) {
	m := new(DeviceRoleChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceRoleServiceServer is the server API for DeviceRoleService service.
type DeviceRoleServiceServer interface {
	// Set provides means to add, update or delete device role configuration.
	Set(context.Context, *DeviceRoleChangeRequest) (*DeviceRoleChangeResponse, error)
	// Get provides means to query device role configuration.
	Get(*DeviceRoleRequest, DeviceRoleService_GetServer) error
	// Subscribe provides means to monitor changes in the device role configuration.
	Subscribe(*DeviceRoleRequest, DeviceRoleService_SubscribeServer) error
}

// UnimplementedDeviceRoleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceRoleServiceServer struct {
}

func (*UnimplementedDeviceRoleServiceServer) Set(ctx context.Context, req *DeviceRoleChangeRequest) (*DeviceRoleChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedDeviceRoleServiceServer) Get(req *DeviceRoleRequest, srv DeviceRoleService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDeviceRoleServiceServer) Subscribe(req *DeviceRoleRequest, srv DeviceRoleService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterDeviceRoleServiceServer(s *grpc.Server, srv DeviceRoleServiceServer) {
	s.RegisterService(&_DeviceRoleService_serviceDesc, srv)
}

func _DeviceRoleService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRoleChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRoleServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.DeviceRoleService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRoleServiceServer).Set(ctx, req.(*DeviceRoleChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRoleService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceRoleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceRoleServiceServer).Get(m, &deviceRoleServiceGetServer{stream})
}

type DeviceRoleService_GetServer interface {
	Send(*DeviceRoleConfig) error
	grpc.ServerStream
}

type deviceRoleServiceGetServer struct {
	grpc.ServerStream
}

func (x *deviceRoleServiceGetServer) Send(m *DeviceRoleConfig) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceRoleService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceRoleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceRoleServiceServer).Subscribe(m, &deviceRoleServiceSubscribeServer{stream})
}

type DeviceRoleService_SubscribeServer interface {
	Send(*DeviceRoleChange) error
	grpc.ServerStream
}

type deviceRoleServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceRoleServiceSubscribeServer) Send(m *DeviceRoleChange) error {
	return x.ServerStream.SendMsg(m)
}

var _DeviceRoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.DeviceRoleService",
	HandlerType: (*DeviceRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _DeviceRoleService_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _DeviceRoleService_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceRoleService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/admin/roles.proto",
}
