/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package admin;

// DeviceRoleConfig carries the template configuration associated with a device role
message DeviceRoleConfig {
    string role = 1;
    DeviceConfig config = 2;
    DevicePipeline pipeline = 3;
}

// DeviceConfig is a set of initial configuration properties to be applied to a device.
message DeviceConfig {
    string softwareVersion = 1;
    repeated DeviceProperty properties = 2;
}

// DeviceProperty is a path/type/value tuple
message DeviceProperty {
    string path = 1;
    string type = 2;
    string value = 3;
}

// DevicePipeline carries information about the P4 pipeline configuration
message DevicePipeline {
    string pipeconf = 1;
    string driver = 2;
}

// DeviceRoleChange is an event describing a change to a device role configuration.
message DeviceRoleChange {
    enum ChangeType {
        UPDATED = 0;
        ADDED = 1;
        DELETED = 2;
    }
    ChangeType change = 1;
    DeviceRoleConfig config = 2;
}

// DeviceRoleChangeRequest is a request for a change to a device role configuration
message DeviceRoleChangeRequest {
    enum ChangeType {
        UPDATE = 0;
        ADD = 1;
        DELETE = 2;
    }
    ChangeType change = 1;
    DeviceRoleConfig config = 2;
}

// DeviceRoleChangeResponse is a response for a change to a device role configuration
message DeviceRoleChangeResponse {
    DeviceRoleChange change = 2;
}

// DeviceRoleRequest is a request for device role configuration.
message DeviceRoleRequest {
    string role = 1;
}

// DeviceRoleService provides means for setting up device role configurations
// in support of zero-touch provisioning activities.
service DeviceRoleService {
    // Set provides means to add, update or delete device role configuration.
    rpc Set(DeviceRoleChangeRequest) returns (DeviceRoleChangeResponse);

    // Get provides means to query device role configuration.
    rpc Get(DeviceRoleRequest) returns (stream DeviceRoleConfig);

    // Subscribe provides means to monitor changes in the device role configuration.
    rpc Subscribe(DeviceRoleRequest) returns (stream DeviceRoleChange);
}


